name: Browser Automation Tests

on: [push, pull_request]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'  # If using Poetry
  PLAYWRIGHT_VERSION: '1.42.0'  # Pin Playwright version

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'  # Enable pip caching

      # Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: cache-playwright
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      # Cache Python dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgbm-dev libnss3 libatk1.0-0 libatk-bridge2.0-0
          sudo apt-get install -y libdrm-dev libxkbcommon-dev libgtk-3-dev libasound2

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Only install Playwright if not cached
          if [ "${{ steps.cache-playwright.outputs.cache-hit }}" != 'true' ]; then
            npx playwright install --with-deps ${{ env.PLAYWRIGHT_VERSION }}
          fi

      - name: Run tests
        env:
          HEADLESS: "true"
          BROWSER_TYPE: "chromium"
          TEST_TIMEOUT: "120"
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: ${{ steps.cache-playwright.outputs.cache-hit == 'true' }}
        run: |
          mkdir -p reports screenshots
          python -m run_all
          
          # Verify reports were generated
          if [ ! -f "test_report.json" ]; then
            echo "❌ Error: No JSON report generated"
            exit 1
          fi
          
          if [ -z "$(ls reports/*.html)" ]; then
            echo "❌ Error: No HTML report generated"
            exit 1
          fi

          # Show test summary
          echo "=== Test Summary ==="
          jq '.summary' test_report.json || cat test_report.json

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            reports/
            screenshots/
            test_report.json
          retention-days: 7